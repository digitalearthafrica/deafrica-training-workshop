# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Digital Earth Africa
# This file is distributed under the same license as the Digital Earth
# Africa Training package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Digital Earth Africa Training \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-23 20:32+1100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:9
#: b930e349a84f4d7193f4b6f93954ff59
msgid "Exercise: Determining the extent of water bodies"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:21
#: 23b5943506eb4f6fa2b380f0aac37282
msgid "Set up notebook"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:33
#: 837d41e438984413972a52600ce0232e
msgid "Load packages and functions"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:44
#: f35978a5165e426ebed65bcdcd3cc1aa
msgid ""
"We begin this notebook with our standard set of initial configuration "
"lines to import packages and functions we need. We also import one new "
"function for this exercise: ``wofs_fuser``. The ``wofs_fuser`` function "
"is used to combine WOfS data from multiple scenes."
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:75
#: 0906a980719d4b2b9faddc7805b0169a
msgid "Connect to the datacube"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:86
#: 79afcc6231e943f086b5f15a551de08f
msgid ""
"We create a new connection to the Open Data Cube, and save it into the "
"variable ``dc``."
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:108
#: 488036b1046642d484dd98306d682109
msgid "Select area of interest"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:119
#: 4c79ecdadf684dfaa2cf519f15276b3b
msgid ""
"Below, we save the lat/lon extents of our area of interest into variables"
" that we will use to load the data. We use the ‘buffer method’ to define "
"the area in terms of a center point plus or minus a buffer of 0.2 "
"degrees. In the previous exercie we used a single buffer variable for "
"both latitude and longitude; this time we will define both a "
"``lat_buffer`` and a ``lon_buffer`` so that we can easily define a "
"rectangular region of interest."
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:196
#: 95ce659c57af443ba99812b81277e40e
msgid "Create query object"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:207
#: b443e76d88dc4eed80a594d876c898ca
msgid ""
"In the following cell, we create a Python dictionary and assign it to the"
" variable ``query``. Dictionaries are key-value stores, which means that "
"a value stored in a dictionary can be retrieved using the key under which"
" it was stored. In the dictionary below, for example, we define a key "
"called ``'x'``, and store the ``lon_range`` under that key. Creating a "
"dictionary to store some or all of the values that we use to load our "
"data can help to keep our code organized, and makes it easier to reuse "
"the parameters in subsequent loads. Below, we will use ``query`` in two "
"separate calls to ``load_ard`` to load two sets of data (Landsat 8 and "
"WOfS)."
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:237
#: 5dbce738e8f94208ba742e13ae575377
msgid "Load data"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:249
#: b2ec0daec60b403aa9331514817de1a1
msgid "Load Landsat 8"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:260
#: d672960b98ba46ca80cea3f169bad7dc
msgid ""
"Note that the following call to ``load_ard`` omits several of the "
"parameters we’re used to seeing (such as the extents and resolution). "
"Instead we use the ``query`` variable that we defined above. Passing "
"``**query`` tells Python to send each of the values stored in the "
"dictionary to ``load_ard`` as if we had supplied that value for the "
"parameter identified by the corresponding key. For example, since the "
"``query`` dictionary defines ``'x'`` to be ``lon_range``, it is as if we "
"had included the usual ``x = lon_range,`` line in our call to "
"``load_ard``."
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:880
#: a7df36c074f94dd7a45834088ca49173
msgid "Load WOfS"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:891
#: fda3a77d0f4b49cfb80a9ea9121e10f3
msgid ""
"For the WOfS product, we use the ``dc.load`` call. We can also pass the "
"``query`` dictionary to ``dc.load``, which will reuse the same values "
"that we used in the previous cell."
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:1397
#: b2c70ad20d7a47bab121162919959c7b
msgid "Calculating water extent"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:1409
#: c7eaa2e5737d4bbd9b385e5608641975
msgid "Extract the water pixels"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:1420
#: d30f25c3da4d473e9cabdba5cb9b22e1
msgid ""
"Using the table shown in the exercise, we determined that we want to "
"examine all pixels in the WOfS product which have a value equal to 128. "
"We create a new variable, ``ds_valid_water``, which stores the locations "
"of all pixels in the dataset which are equal to 128. Note this requires "
"the double equals sign ``==``."
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:1441
#: afdbd76464ed4f7fa6bab330556dbdee
msgid ""
"When we view the contents of the ``ds_valid_water`` variable, we can see "
"that it contains a grid of True/False values. Wherever ``ds_wofs.water`` "
"was equal to 128, the array will be True. Note that the preview below "
"only shows a small subset of the full DataArray, and there may not be any"
" True pixels visible in the preview output."
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:2047
#: 1b10cc629933408098b3f4d745d54d6c
msgid "Calculate the area per pixel"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:2058
#: b4e5ee107c7a42fd8dba2877b4c8cb7c
msgid ""
"We can calculate the area of a pixel by converting its resolution (which "
"we specified in meters per pixel in our ``query`` variable’s "
"``'resolution'`` key) into square kilometers per pixel:"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:2082
#: 90c355274351484dbe5aca4cdc638918
msgid "Calculate area of water pixels"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:2093
#: 7406da7a8baa4a3b8bdffac9d99a8039
msgid ""
"Now that we know how many square kilometers a pixel represents, we can "
"take that number and multiply it by the count of all pixels containing "
"water in order to get the total water area in our dataset."
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:2116
#: 0f8cfde8e1a2489c98c19625366f2e86
msgid "Plot Time Series"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:2127
#: 5d34664268024581910f8b870b565418
msgid ""
"The following lines of code create a new ``figure`` which will contain a "
"plot of our water area data, complete with custom titles, axis labels, "
"etc."
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:2162
#: 5a3da189ae554dd08228ce89ea731550
msgid "Display of water coverage for a selected timestep"
msgstr ""

#: ../../_static/session_6/Water_extent_exercise-solution.ipynb:2173
#: 811628e4c64e43fe833553b145f04326
msgid ""
"Finally, we choose one of the times in our time series to generate more "
"customised plots of both the Landsat and WOfS datasets. Here we have "
"chosen timestep ``4`` (the fifth time in the series, since we start "
"counting at zero) but you are encouraged to experiment with other time "
"indices to find times where the lake has dried out (the line plot above "
"may provide some hints!)."
msgstr ""

